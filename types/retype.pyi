from pathlib import Path
from typing import Iterator, List, Optional, Tuple, Union

from lib2to3.pytree import Node
from typed_ast import ast3

def minimize_whitespace(text: str) -> str: ...
def annotate_return(function: Node, ast_returns: Optional[ast3.AST], offset: int) -> None: ...
def annotate_parameters(parameters: Node, ast_args: Any) -> None: ...
def append_after_imports(stmt_to_insert: Node, node: Node) -> None: ...
def make_import(*names: str, from_module: str = None) -> Node: ...
def names_already_imported(names: Union[List[ast3.AST], ast3.AST], node: Node) -> bool: ...
def reapply(ast_node: ast3.AST, lib2to3_node: Node) -> Node: ...
def lib2to3_parse(code: str) -> Node: ...
def lib2to3_unparse(code: Node) -> str: ...
def retype_file(pyi: Path, srcs: Path, targets: Path) -> Path: ...
def retype_path(path: Path, srcs: Path, targets: Path) -> Iterator[Tuple[Path, str]]: ...
def main(src_dir: str, pyi_dir: str, target_dir: str) -> None: ...
