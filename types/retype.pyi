from pathlib import Path
from typing import Callable, Iterator, List, Optional, Tuple, Union

from lib2to3.pytree import Node, Leaf
from typed_ast import ast3

_LN = Union[Node, Leaf]
Callbacks = List[Callable[[], None]]

def new(n: _LN, prefix: str = None) -> _LN: ...
def fix_line_numbers(body: Node) -> None: ...
def name_used_in_node(node: _LN, name: Leaf) -> bool: ...
def get_offset_and_prefix(body: Node, skip_assignments: bool = False) -> Tuple[int, str]: ...
def get_annotated_param(node: _LN, arg: ast3.arg, *, missing_ok: bool = False) -> _LN: ...
def gen_annotated_params(args: ast3.arguments, defaults: List[Optional[ast3.AST]], params: List[_LN], *, implicit_default: bool = False, is_method: bool = False) -> Iterator[_LN]: ...
def pop_param(params: List[_LN]) -> Tuple[_LN, Union[Node, Leaf, None]]: ...
def minimize_whitespace(text: str) -> str: ...
def annotate_return(function: Node, ast_returns: Optional[ast3.AST], offset: int) -> None: ...
def annotate_parameters(parameters: Node, ast_args: ast3.arguments, *, is_method: bool = False) -> None:
    typedargslist: List[_LN]
    defaults: List[Optional[ast3.AST]]

def append_after_imports(stmt_to_insert: Node, node: Node) -> None: ...
def make_import(*names: ast3.alias, from_module: str = None) -> Node: ...
def is_builtin_method_decorator(name: str) -> bool: ...
def decorator_names(obj: Union[Node, ast3.AST, List[Union[Node, ast3.AST]]]) -> List[str]: ...
def names_already_imported(names: Union[List[ast3.AST], ast3.AST], node: Node) -> bool: ...
def convert_annotation(ann: ast3.AST) -> _LN: ...
def serialize_attribute(attr: ast3.AST) -> str: ...
def reapply(ast_node: ast3.AST, lib2to3_node: Node) -> Callbacks: ...
def reapply_all(ast_node: ast3.AST, lib2to3_node: Node) -> None: ...
def lib2to3_parse(src_txt: str) -> Node: ...
def lib2to3_unparse(node: Node) -> str: ...
def retype_file(pyi: Path, srcs: Path, targets: Path) -> Path: ...
def retype_path(path: Path, srcs: Path, targets: Path) -> Iterator[Tuple[Path, str]]: ...
def main(src_dir: str, pyi_dir: str, target_dir: str) -> None: ...

# internal singledispatch implementations, etc.
def _r_list(l: List[ast3.AST], lib2to3_node: Node) -> Callbacks: ...
def _r_importfrom(import_from: ast3.ImportFrom, node: Node) -> Callbacks: ...
def _r_import(import_: ast3.Import, node: Node) -> Callbacks: ...
def _r_classdef(cls: ast3.ClassDef, node: Node) -> Callbacks: ...
def _r_functiondef(fun: ast3.FunctionDef, node: Node) -> Callbacks: ...
def _r_annassign(annassign: ast3.AnnAssign, body: Node) -> Callbacks: ...
def _r_assign(assign: ast3.Assign, body: Node) -> Callbacks: ...

def _sa_attribute(attr: ast3.Attribute) -> str: ...
def _sa_name(name: ast3.Name) -> str: ...
def _sa_expr(expr: ast3.Expr) -> str: ...

def _c_subscript(sub: ast3.Subscript) -> Node: ...
def _c_name(name: ast3.Name) -> Leaf: ...
def _c_nameconstant(const: ast3.NameConstant) -> Leaf: ...
def _c_ellipsis(ell: ast3.Ellipsis) -> Node: ...
def _c_str(s: ast3.Str) -> Leaf: ...
def _c_index(index: ast3.Index) -> _LN: ...
def _c_tuple(tup: ast3.Tuple) -> Node: ...
def _c_attribute(attr: ast3.Attribute) -> Leaf: ...
def _c_call(call: ast3.Call) -> Node: ...
def _c_keyword(kwarg: ast3.keyword) -> Node: ...
def _c_list(l: ast3.List) -> Node: ...

def _nai_list(names: List[ast3.alias], node: Node) -> bool: ...
def _nai_alias(alias: ast3.alias, node: Node) -> bool: ...

def _dn_list(l: List[Union[Node, ast3.AST]]) -> List[str]: ...
def _dn_node(node: Node) -> List[str]: ...
def _dn_name(name: ast3.Name) -> List[str]: ...
def _dn_call(call: ast3.Call) -> List[str]: ...
def _dn_attribute(attr: ast3.Attribute) -> List[str]: ...

def _nuin_node(node: Node, name: Leaf) -> bool: ...
def _nuin_leaf(leaf: Leaf, name: Leaf) -> bool: ...
